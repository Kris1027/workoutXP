generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Exercise {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  category     String
  difficulty   String
  imageUrl     String
  description  String
  instructions String?   @db.Text
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  workouts     Workout[] @relation("WorkoutExercises")
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?
}

model Workout {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  imageUrl    String
  description String
  difficulty  String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  exercises   Exercise[]    @relation("WorkoutExercises")
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  likes       WorkoutLike[]
  sessions    WorkoutSession[]
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  password      String?
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean       @default(false)
  accounts      Account[]
  sessions      Session[]

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  Workout       Workout[]
  workoutLikes  WorkoutLike[]
  Exercise      Exercise[]
  workoutSessions WorkoutSession[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model WorkoutLike {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String
  workoutId String   @db.Uuid
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  workout Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  @@unique([userId, workoutId])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model WorkoutSession {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId           String
  workoutId        String   @db.Uuid
  duration         Int      // Duration in seconds
  exercisesCompleted Int
  totalExercises   Int
  completedAt      DateTime @default(now())
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  workout Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([workoutId])
}
